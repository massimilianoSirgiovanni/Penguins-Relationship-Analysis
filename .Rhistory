plot(x, y, col=c("red","green3","blue", "yellow")[cluster_fuzzy$cluster], lwd = 3)
points(cluster_fuzzy$center, col="black", lwd=3)
print(cluster_fuzzy$size)
print(cluster_fuzzy$centers)
print(head(cluster_fuzzy$membership))
library(corrplot)
corrplot(cluster_fuzzy$membership, is.corr = FALSE, col = c("green4", "orange2", "red2"))
library(factoextra)
fviz_cluster(list(data = dataset1, cluster=cluster_fuzzy$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
cluster_fuzzy_m10 <-cmeans(dataset1, centers=4, verbose=T, dist="euclidean", method="cmeans", m = 10)
cluster_fuzzy_m10$cluster
head(cluster_fuzzy_m10$membership)
corrplot(cluster_fuzzy_m10$membership, is.corr = FALSE, col = c("green4", "orange2", "red2"))
set.seed(111)
x <- runif(50, 0, 20)
y <- runif(50, 0, 20)
dataset2 <- cbind(x, y)
plot(dataset2)
cl_fuzzy <-cmeans(dataset2, centers=4, verbose=T, dist="euclidean", method="cmeans", m = 2)
cl_fuzzy$cluster
plot(x, y, col=c("red","green3","blue", "yellow")[cl_fuzzy$cluster], lwd = 3)
points(cl_fuzzy$center, col="black", lwd=3)
library(corrplot)
corrplot(cl_fuzzy$membership, is.corr = FALSE, col = c("green4", "orange2", "red2"))
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
cl_fuzzy_m10 <-cmeans(dataset2, centers=4, verbose=T, dist="euclidean", method="cmeans", m = 10)
cl_fuzzy_m10$cluster
plot(x, y, col=c("red","green3","blue", "yellow")[cl_fuzzy_m10$cluster], lwd = 3)
points(cl_fuzzy_m10$center, col="black", lwd=3)
library(corrplot)
corrplot(cl_fuzzy_m10$membership, is.corr = FALSE, col = c("green4", "orange2", "red2"))
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
cl_fuzzy_m10 <-cmeans(dataset2, centers=4, verbose=T, dist="euclidean", method="cmeans", m = 6)
cl_fuzzy_m10$cluster
plot(x, y, col=c("red","green3","blue", "yellow")[cl_fuzzy_m10$cluster], lwd = 3)
points(cl_fuzzy_m10$center, col="black", lwd=3)
library(corrplot)
corrplot(cl_fuzzy_m10$membership, is.corr = FALSE, col = c("green4", "orange2", "red2"))
fviz_cluster(list(data = dataset2, cluster=cl_fuzzy_m10$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
setwd("~")
setwd("~")
library(igraph)
library(rgexf)
#setwd("C:/Users/ciard/Desktop/Informatica/2Magistrale/Materie/Web Mining/Laboratorio/Progetto")
setwd("~/Progetto Web Mining")
set.seed(111)
# Definition of male penguins:
males = c("Takatsuji", "Juujou", "Kamanza", "Ryou", "Nishi", "Kami", "Atsushii", "Sakura",
"Yanagi", "Joufuku", "Matsuya", "Oike", "Man", "Nako", "Kuruma", "Rokkaku",
"Kuro", "Mikage", "Horikawa", "Oomiya", "Nijou", "Ebisu", "Aya", "Same",
"Takara", "Shijou", "Shinmachi", "Takakura", "Take", "Maru", "Naka", "Higashi",
"Yosha", "Bukkou", "Abira", "Sen")
# Reading data from various files:
matrix_couples <- read.csv("./data/csv/Penguins of Kyoto - Couples.csv")
matrix_enemies <- read.csv("./data/csv/Penguins of Kyoto - Enemies.csv")
matrix_complicated <- read.csv("./data/csv/Penguins of Kyoto - Complicated.csv")
matrix_friends <- read.csv("./data/csv/Penguins of Kyoto - Friends.csv")
matrix_ex <- read.csv("./data/csv/Penguins of Kyoto - Exes.csv") #(Not Bad)
matrix_family <- read.csv("./data/csv/Penguins of Kyoto - Family.csv")
# Sometimes the same penguin is referred to by different names:
# Yosha = Yoshiya
# Moto = Moe
# Disambiguation of names:
names <-  c(matrix_family[, 1])
names[11] <- "Moe"
names[12] <- "Atsushii"
names[18] <- "Kagera"
names[56] <- "Abira"
names[53] <- "Yosha"
# Definition of female penguins:
females = setdiff(names, males)
# ADJACENCY MATRICES:
# Definition of the adjacency matrices related to the various graphs:
# Adjacency matrix for family:
matrix_family <- as.matrix(matrix_family)
matrix_family <- as.numeric(matrix_family[, -1])
matrix_family <- matrix(matrix_family, nrow=59, ncol=59)
# Adjacency matrix for ex:
matrix_ex <- as.matrix(matrix_ex)
matrix_ex <- as.numeric(matrix_ex[, -1])
matrix_ex <- matrix(matrix_ex, nrow=59, ncol=59)
# Adjacency matrix for couples:
matrix_couples <- as.matrix(matrix_couples)
matrix_couples <- as.numeric(matrix_couples[, -1])
matrix_couples <- matrix(matrix_couples, nrow=59, ncol=59)
# Adjacency matrix for enemies:
matrix_enemies <- as.matrix(matrix_enemies)
matrix_enemies <- as.numeric(matrix_enemies[, -1])
matrix_enemies <- matrix(matrix_enemies, nrow=59, ncol=59)
# Adjacency matrix for complicated:
# Complicated data refer to complicated relationships among penguins
matrix_complicated <- as.matrix(matrix_complicated)
matrix_complicated <- as.numeric(matrix_complicated[, -1])
matrix_complicated <- matrix(matrix_complicated, nrow=59, ncol=59)
# Adjacency matrix for friends:
matrix_friends <- as.matrix(matrix_friends)
matrix_friends <- as.numeric(matrix_friends[, -1])
matrix_friends <- matrix(matrix_friends, nrow=59, ncol=59)
# GRAPH CREATION AND PLOTTING:
#Gender Attribute
gender <- rep(0, length(names))
gender <- matrix(gender, ncol = 1)
gender
rownames(gender) <- names
gender[rownames(gender) %in% males] <- 1
gender
gender <- c(gender)
#gender <- as.data.frame(gender, row.names = NULL)
# From adjacency matrix to graph:
graph_family <- graph_from_adjacency_matrix(matrix_family, mode="directed")
graph_family <- set_vertex_attr(graph_family, 'Gender', index=V(graph_family), gender)
# Renaming nodes and edges names:
V(graph_family)$name = names
E(graph_family)$label = "Family"
E(graph_family)$color = "black"
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
#only_odd_vertices <- which(V(graph_family)$Gender==0)
#length(only_odd_vertices)
#V(graph_family)$color <- ifelse(V(graph_family)$Gender == 0, "blue", "pink")
#plot(graph_family, layout = layout, vertex.label.dist = 3.5,
#     main = "Social network - with genders as colors")
# Plotting of graph:
# Color=blue if male; Color=pink if female:
pal = c("deeppink", "blue")
plot(graph_family, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_family, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA, layout=layout_with_kk)
# Legend of graph edges:
legend(-1.7,1, legend=c("Family"),
fill = c("black")
)
}
# Same actions for all the other graphs:
graph_ex <- graph_from_adjacency_matrix(matrix_ex, mode="directed")
V(graph_ex)$name = names
E(graph_ex)$label = "Ex"
E(graph_ex)$color = "blue"
graph_ex <- set_vertex_attr(graph_ex, 'Gender', index=V(graph_ex), gender)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Plotting of graph:
pal = c("deeppink", "blue")
plot(graph_ex, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_ex, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA, layout=layout_with_kk)
# Legend of graph edges:
legend(-1.7,1, legend=c("Ex"),
fill = c("blue")
)
}
graph_couples <- graph_from_adjacency_matrix(matrix_couples, mode="directed")
V(graph_couples)$name = names
E(graph_couples)$label = "Couples"
E(graph_couples)$color = "red"
graph_couples <- set_vertex_attr(graph_couples, 'Gender', index=V(graph_couples), gender)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Plotting of graph:
pal = c("deeppink", "blue")
set.seed(111)
plot(graph_couples, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_couples, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA)
# Legend of graph edges:
legend(-1.7,1, legend=c("Couples"),
fill = c("red")
)
}
graph_enemies <- graph_from_adjacency_matrix(matrix_enemies, mode="directed")
V(graph_enemies)$name = names
E(graph_enemies)$label = "Enemies"
E(graph_enemies)$color = "green"
graph_enemies <- set_vertex_attr(graph_enemies, 'Gender', index=V(graph_enemies), gender)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Plotting of graph:
pal = c("deeppink", "blue")
plot(graph_enemies, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_enemies, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA, layout=layout_with_kk)
# Legend of graph edges:
legend(-1.7,1, legend=c("Enemies"),
fill = c("green")
)}
graph_complicated <- graph_from_adjacency_matrix(matrix_complicated, mode="directed")
V(graph_complicated)$name = names
E(graph_complicated)$label = "Complicated"
E(graph_complicated)$color = "purple"
graph_complicated <- set_vertex_attr(graph_complicated, 'Gender', index=V(graph_complicated), gender)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Plotting of graph:
pal = c("deeppink", "blue")
plot(graph_complicated, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_complicated, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA, layout=layout_with_kk)
# Legend of graph edges:
legend(-1.7,1, legend=c("Complicated"),
fill = c("purple")
)}
graph_friends <- graph_from_adjacency_matrix(matrix_friends, mode="directed")
V(graph_friends)$name = names
E(graph_friends)$label = "Friends"
E(graph_friends)$color = "yellow"
graph_friends <- set_vertex_attr(graph_friends, 'Gender', index=V(graph_friends), gender)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Plotting of graph:
pal = c("deeppink", "blue")
set.seed(111)
plot(graph_friends, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_friends, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA)
# Legend of graph edges:
legend(-1.7,1, legend=c("Friends"),
fill = c("yellow1")
)
}
# MERGING OF THE VARIOUS GRAPHS:
par(mfrow = c(1, 1))
fusion <- rbind(as_data_frame(graph_enemies), as_data_frame(graph_complicated), as_data_frame(graph_family), as_data_frame(graph_ex), as_data_frame(graph_couples), as_data_frame(graph_friends))
graph_complete  <- graph_from_data_frame(fusion)
#dev.new() edge.label=E(G3b)$at, edge.color=ifelse(E(G3b)$at == "black", "red")
gender_complete <- rep(0, length(names))
gender_complete <- matrix(gender_complete, ncol = 1)
gender_complete
rownames(gender_complete) <- V(graph_complete)$name
gender_complete[rownames(gender_complete) %in% males] <- 1
gender_complete
gender_complete <- c(gender_complete)
graph_complete <- set_vertex_attr(graph_complete, 'Gender', index=V(graph_complete), gender_complete)
# Window size:
{windows.options(width=20, height=10)
# Plot size in the window:
dev.new(width=20, height=10, unit="in") # Dimensioni plot in finestra
# Graph plot:
pal = c("deeppink", "blue")
plot(graph_complete, vertex.size=2, vertex.label.color=pal[as.numeric(as.factor(vertex_attr(graph_complete, "Gender")))], edge.arrow.size = 0.2, edge.wigth = 1, edge.label=NA, layout=layout_with_kk)
# Legend of graph edges:
legend(-1.7,1, legend=c("Family", "Ex", "Couples", "Complicated", "Enemies", "Friends"),
fill = c("black", "blue", "red", "purple","green", "yellow")
)
}
library(sbm)
library(ggplot2)
matrix_complete = as_adjacency_matrix(graph_complete, names = FALSE)
matrix_complete = as.matrix(matrix_complete, nrow=59, ncol=59)
plotMyMatrix(matrix_family, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Family'))
# Graph ex:
plotMyMatrix(matrix_ex, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Ex'))
# Graph couples:
plotMyMatrix(matrix_couples, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Couples'))
# Graph enemies: # not considered
plotMyMatrix(matrix_enemies, dimLabels = list(row = 'Penguins', col = 'Penguins'), , plotOptions= list(title='Enemies'))
# Graph complicated: # not considered
plotMyMatrix(matrix_complicated, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Complicated'))
# Graph friends: # not considered
plotMyMatrix(matrix_friends, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Friends'))
# Graph complete:
plotMyMatrix(matrix_complete, dimLabels = list(row = 'Penguins', col = 'Penguins'), plotOptions= list(title='Complete'))
# Family:
sbm_family = estimateSimpleSBM(matrix_family, "bernoulli", dimLabels = 'Penguins',
estimOptions = list(verbosity = 1))
sbm_family
# Ex:
sbm_ex = estimateSimpleSBM(matrix_ex, "bernoulli", dimLabels = 'Penguins',
estimOptions = list(verbosity = 1))
sbm_ex
# Couples:
sbm_couples = estimateSimpleSBM(matrix_couples, "bernoulli", dimLabels = 'Penguins',
estimOptions = list(verbosity = 1))
sbm_couples
# Complete:
sbm_complete = estimateSimpleSBM(matrix_complete, "bernoulli", dimLabels = 'Penguins',
estimOptions = list(verbosity = 1))
sbm_complete
# Family:
# selected number of blocks
sbm_family$nbBlocks
# prior block probabilities
sbm_family$blockProp
# connectivity parameters
round(sbm_family$connectParam$mean,3)
# Ex:
# selected number of blocks
sbm_ex$nbBlocks
# prior block probabilities
sbm_ex$blockProp
# connectivity parameters
round(sbm_ex$connectParam$mean,3)
# Couples:
# selected number of blocks
sbm_couples$nbBlocks
# prior block probabilities
sbm_couples$blockProp
# connectivity parameters
round(sbm_couples$connectParam$mean,3)
# Complete:
# selected number of blocks
sbm_complete$nbBlocks
# prior block probabilities
sbm_complete$blockProp
# connectivity parameters
round(sbm_complete$connectParam$mean,3)
# Family:
plot(sbm_family, type = "data")
# nodes are ordered wrt to the block they belong to and blocks are highlighted
plot(sbm_family, type = "expected")
# fitted connection probabilities
plot(sbm_family, type = "meso")
# fitted connection probabilities
# Ex:
plot(sbm_ex, type = "data")
# nodes are ordered wrt to the block they belong to and blocks are highlighted
plot(sbm_ex, type = "expected")
# fitted connection probabilities
plot(sbm_ex, type = "meso")
# fitted connection probabilities
# Couples:
plot(sbm_couples, type = "data")
# nodes are ordered wrt to the block they belong to and blocks are highlighted
plot(sbm_couples, type = "expected")
# fitted connection probabilities
plot(sbm_couples, type = "meso")
# fitted connection probabilities
# Complete:
plot(sbm_complete, type = "data")
# nodes are ordered wrt to the block they belong to and blocks are highlighted
plot(sbm_complete, type = "expected")
# fitted connection probabilities
plot(sbm_complete, type = "meso")
# fitted connection probabilities
# Family:
sbm_family$storedModels
sbm_family$setModel(2)
sbm_family$memberships
# Ex:
sbm_ex$storedModels
sbm_ex$setModel(3)
sbm_ex$memberships
# Couples:
sbm_couples$storedModels
sbm_couples$memberships
# Complete:
sbm_complete$storedModels
sbm_complete$setModel(2)
sbm_complete$memberships
# Family:
sbm_family$nbBlocks
# prior block probabilities
sbm_family$blockProp
# connectivity parameters
round(sbm_family$connectParam$mean,3)
# Ex:
sbm_ex$nbBlocks
# prior block probabilities
sbm_ex$blockProp
# connectivity parameters
round(sbm_ex$connectParam$mean,3)
# Complete:
sbm_complete$nbBlocks
# prior block probabilities
sbm_complete$blockProp
# connectivity parameters
round(sbm_complete$connectParam$mean,3)
# Friends:
# Let us graphically represent the data matrix
# reordering rows and cols according to the estimated block in the SBM
plot(sbm_family, type = "data", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# or the average number of connections between trees
plot(sbm_family, type = "expected", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# or
plot(sbm_family, type = "meso", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# Ex:
# Let us graphically represent the data matrix
# reordering rows and cols according to the estimated block in the SBM
plot(sbm_ex, type = "data", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# or the average number of connections between trees
plot(sbm_ex, type = "expected", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# or
plot(sbm_ex, type = "meso", dimLabels = list(row = 'Penguins', col= 'Penguins'))
# Complete:
# Let us graphically represent the data matrix
# reordering rows and cols according to the estimated block in the SBM
plot(sbm_complete, type = "data", dimLabels = list(row = 'Penguins', col= 'Penguins'))
matrix_complete <- get.adjacency(graph_complete, sparse=F)
diag(matrix_complete) = NA
p.MLE = mean(matrix_complete, na.rm = T)
p.MLE
matrix_family <- get.adjacency(graph_family, sparse=F)
diag(matrix_family) = NA
p.MLE = mean(matrix_family, na.rm = T)
p.MLE
matrix_ex <- get.adjacency(graph_ex, sparse=F)
diag(matrix_ex) = NA
p.MLE = mean(matrix_ex, na.rm = T)
p.MLE
matrix_couples <- get.adjacency(graph_couples, sparse=F)
diag(matrix_couples) = NA
p.MLE = mean(matrix_couples, na.rm = T)
p.MLE
library(ergm)
gender <- as.data.frame(gender, row.names = NULL)
gender_complete <- as.data.frame(gender_complete, row.names = NULL)
# -------- mod1: homogeneous binomial random graph model --------
net_complete = network(matrix_complete, directed = T)
net_complete %v% "Gender" = gender_complete$gender_complete
net_family = network(matrix_family, directed = T)
net_family %v% "Gender" = gender$gender
net_ex = network(matrix_ex, directed = T)
net_ex %v% "Gender" = gender$gender
net_couples = network(matrix_couples, directed = T)
net_couples %v% "Gender" = gender$gender
#************************************
# Let's estimate the NULL model: BRG
#************************************
mod0_complete = ergm(net_complete ~ edges)
# look in more depth
summary(mod0_complete)
mod0_family = ergm(net_family ~ edges)
summary(mod0_family)
mod0_ex = ergm(net_ex ~ edges)
summary(mod0_ex)
mod0_couples = ergm(net_couples ~ edges)
summary(mod0_couples)
mod1_complete = ergm(net_complete ~ edges + sender + receiver)
summary(mod1_complete)
# Tutte i coefficienti dei receiver (eccetto quelli posti a -Inf) non sono significativi
# dunque tale modello probabilmente non sar? molto valido (per i sender il discorso ? simile)
mod1_family = ergm(net_family ~ edges + sender + receiver)
summary(mod1_family)
mod1_ex = ergm(net_ex ~ edges + sender + receiver)
summary(mod1_ex)
mod1_couples = ergm(net_couples ~ edges + sender + receiver)
summary(mod1_couples)
BIC(mod0_complete, mod1_complete)  #mod0 better
AIC(mod0_complete, mod1_complete)  #mod0 better
BIC(mod0_family, mod1_family)  #mod0 better
AIC(mod0_family, mod1_family)  #mod1 better
BIC(mod0_ex, mod1_ex) #mod0 better
AIC(mod0_ex, mod1_ex) #mod1 better
BIC(mod0_couples, mod1_couples) #mod0 better
AIC(mod0_couples, mod1_couples) #mod0 better
mod3_complete = ergm(net_complete ~ edges + mutual, control = control.ergm(seed = 10))
summary(mod3_complete)
mod3_family= ergm(net_family ~ edges + mutual, control = control.ergm(seed = 10))
summary(mod3_family) # -Inf a mutual perch? non vi sono relazioni bidirezionali
mod3_ex = ergm(net_ex ~ edges + mutual, control = control.ergm(seed = 10))
summary(mod3_ex)
mod3_couples = ergm(net_couples ~ edges + mutual, control = control.ergm(seed = 10))
summary(mod3_couples) #Unable to reach target effective size in iterations alotted.
BIC(mod0_complete, mod3_complete)   # mod3 better
AIC(mod0_complete, mod3_complete)   # mod3 better
BIC(mod0_family, mod3_family)    # mod0 better
AIC(mod0_family, mod3_family)    # mod0 better
# Mutual coefficient is -Inf, so AIC and BIC are not computable
# This is becouse there are no mutual attribute in net_family
BIC(mod0_ex, mod3_ex)    # mod3 better
AIC(mod0_ex, mod3_ex)    # mod3 better
mod4_complete = ergm(net_complete ~ edges + mutual + nodefactor("Gender") + nodematch("Gender"), control = control.ergm(seed = 10))
summary(mod4_complete)
mod4_family = ergm(net_family ~ edges + nodefactor("Gender") + nodematch("Gender"), control = control.ergm(seed = 10))
summary(mod4_family)
mod4_ex = ergm(net_ex ~ edges + mutual + nodefactor("Gender") + nodematch("Gender"), control = control.ergm(seed = 10))
summary(mod4_ex)
mod4_couples = ergm(net_couples ~ edges + nodefactor("Gender") + nodematch("Gender"), control = control.ergm(seed = 10))
summary(mod4_couples) #No homosexual relation
mod5_complete = ergm(net_complete ~ edges + mutual + nodematch("Gender"), control = control.ergm(seed = 10))
summary(mod5_complete)
BIC(mod3_complete, mod4_complete, mod5_complete)   # mod5 better
AIC(mod3_complete, mod4_complete, mod5_complete)   # mod5 better
BIC(mod4_family, mod0_family)    # mod0 better
AIC(mod4_family, mod0_family)    # mod0 better
BIC(mod4_ex, mod3_ex)    # mod3 better
AIC(mod4_ex, mod3_ex)    # mod4 better
